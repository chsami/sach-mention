/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface MyComponent {
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
    */
    'debounce': number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode': string;
    'searchTermLength': number;
    'values': Array<string>;
  }
  interface MyComponentAttributes extends StencilHTMLAttributes {
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
    */
    'debounce'?: number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: string;
    /**
    * Emitted when a keyboard input ocurred.
    */
    'onInputEvent'?: (event: CustomEvent<KeyboardEvent>) => void;
    'onOnChange'?: (event: CustomEvent<string>) => void;
    'onOnFocus'?: (event: CustomEvent<void>) => void;
    'searchTermLength'?: number;
    'values'?: Array<string>;
  }
}

declare global {
  interface StencilElementInterfaces {
    'MyComponent': Components.MyComponent;
  }

  interface StencilIntrinsicElements {
    'my-component': Components.MyComponentAttributes;
  }


  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };

  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement
  }

  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
